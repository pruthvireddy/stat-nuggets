#how many times to roll dice
N_trials <- 100000
win_val <- 21
play_val <- -5
#set up for loop
tally <- numeric(length = N_trials)
#loop
for(i in 1:N_trials){
#roll dice
dice1 <- sample(1:6,1)
dice2 <- sample(1:6,1)
#add together
mysum <- dice1+dice2
#compute my score for the trial
if(mysum==7){
myscore <- win_val + play_val
} else {
myscore <- play_val
}
#write to store
tally[i] <- myscore
}
#find total money lost per trial
overall <- sum(tally)/length(tally)
overall
plot(cumsum(tally))
#how many times to roll dice
N_trials <- 100000
win_val <- 21
play_val <- -3
#set up for loop
tally <- numeric(length = N_trials)
#loop
for(i in 1:N_trials){
#roll dice
dice1 <- sample(1:6,1)
dice2 <- sample(1:6,1)
#add together
mysum <- dice1+dice2
#compute my score for the trial
if(mysum==7){
myscore <- win_val + play_val
} else {
myscore <- play_val
}
#write to store
tally[i] <- myscore
}
#find total money lost per trial
overall <- sum(tally)/length(tally)
overall
plot(cumsum(tally))
#how many times to roll dice
N_trials <- 100000
win_val <- 21
play_val <- -3.5
#set up for loop
tally <- numeric(length = N_trials)
#loop
for(i in 1:N_trials){
#roll dice
dice1 <- sample(1:6,1)
dice2 <- sample(1:6,1)
#add together
mysum <- dice1+dice2
#compute my score for the trial
if(mysum==7){
myscore <- win_val + play_val
} else {
myscore <- play_val
}
#write to store
tally[i] <- myscore
}
#find total money lost per trial
overall <- sum(tally)/length(tally)
overall
plot(cumsum(tally))
#how many times to roll dice
N_trials <- 100000
win_val <- 21
play_val <- -3.5
#set up for loop
tally <- numeric(length = N_trials)
#loop
for(i in 1:N_trials){
#roll dice
dice1 <- sample(1:6,1)
dice2 <- sample(1:6,1)
#add together
mysum <- dice1+dice2
#compute my score for the trial
if(mysum==7){
myscore <- win_val + play_val
} else {
myscore <- play_val
}
#write to store
tally[i] <- myscore
}
#find total money lost per trial
overall <- sum(tally)/length(tally)
overall
plot(cumsum(tally))
#how many times to roll dice
N_trials <- 100000
win_val <- 21
play_val <- -3.5
#set up for loop
tally <- numeric(length = N_trials)
#loop
for(i in 1:N_trials){
#roll dice
dice1 <- sample(1:6,1)
dice2 <- sample(1:6,1)
#add together
mysum <- dice1+dice2
#compute my score for the trial
if(mysum==7){
myscore <- win_val + play_val
} else {
myscore <- play_val
}
#write to store
tally[i] <- myscore
}
#find total money lost per trial
overall <- sum(tally)/length(tally)
overall
plot(cumsum(tally))
#--- R Lab # 6 ----
#install.packages("plm")
library(plm)
d=read.csv(file.choose()) ## choose "panel-for-R.csv" and more information on variables are here: http://sda.berkeley.edu/sdaweb/analysis/?dataset=gss06panelw3 ##
vars <- c("idnum","panelwave","affrmact","race", "intrace1")
pd.sub <- d[, vars]
pd.sub$black = ifelse(pd.sub$race==2, 1, 0) ## this is if the person is black or not
pd.sub$intblack = ifelse(pd.sub$intrace1==2, 1, 0) ## this is if the interviewer is black or not
pd.sub$r.affact = 5-pd.sub$affrmact ## this is how people feel about What about your opinion "Do you favor preference in hiring and promotion strongly or not strongly for blacks? If opposes: Do you oppose preference in hiring and promotion strongly or not strongly?" ranging from strong support to strong opposition
pd.sub$year= ifelse(pd.sub$panelwave==3, 1, 0)
## 1. Run a naive ("pooled") OLS regression on the panel data.  Tell we how you expect your Xs to affect your Y and why.  Apply clustered standard errors too.  Interpret your results.
lm1 <- lm(r.affact ~ black + intblack + as.factor(panelwave),  data = pd.sub)
summary(lm1)
## Here is teh clusterSE from the QMSS package ##
#' Compute clustered standard errors.
#'
#' @param fit A model fit with \code{\link[plm]{plm}} (\pkg{plm}).
#' @param cluster.var A character string naming the grouping/cluster variable.
#' @param data A data frame containing \code{cluster.var} Only needed if
#' \code{cluster.var} is not included in \code{index}. See 'Examples' below.
#' @return Output from \code{\link[lmtest]{coeftest}} (\pkg{lmtest}) but with clustered standard errors.
#' @author Jonah Gabry <jsg2201@@columbia.edu>
#' @note \code{clusterSE} does not work with models fit with \code{lm}, however a similar model
#' can be fit with \code{\link[plm]{plm}} using the option \code{model = "pooling"}. You can then
#' use \code{clusterSE} to compute clustered standard errors and retest the coefficients.
#' @seealso \code{\link[lmtest]{coeftest}}
#' @export
#' @examples
#' \dontrun{
#' # Model from plm help page:
#' data("Produc", package = "plm")
#' fit <- plm(log(gsp) ~ log(pcap) + log(pc) + log(emp) + unemp,
#'            data = Produc, index = c("state","year"), model = "random")
#'
#' clusterSE(fit, cluster.var = "state") # don't need data argument since "state" is included in index
#' }
#'
clusterSE <- function(fit, cluster.var, data){ # note: cluster.var should be entered as character string
require(plm); require(lmtest)
if (missing(data) & cluster.var %in% colnames(index(fit))){
cvar <- index(fit, cluster.var)
n <- length(unique(cvar))
N <- length(cvar)
}
else{
row.ids <- as.numeric(rownames(model.frame(fit)))
# 1. get number of clusters (omitting individuals with missingness on "divorce.easier" and/or "divorced")
n <- length(unique(data[row.ids, cluster.var]))
# 2. get number of observations (again omitting the same individuals with missingness)
N <- length(row.ids)
}
#3. compute degrees of freedom
df <- (n/(n - 1)) * (N - 1)/fit$df.residual
# compute variance-covariance matrix
vcov <- df*vcovHC(fit, type = "HC0", cluster = "group")
# retest coefficients
coeftest(fit, vcov = vcov)
}
clusterSE(fit = lm1, cluster.var = "idnum", data=pd.sub)
d=read.csv(file.choose())
library(dplyr)
d <-
d %>%
mutate(new_V57 = case_when(
V57 == 1  ~ "married",
V57 == 2  ~ "not-married")
)
library(dplyr)
d <-
d %>%
mutate(new_V57 = case_when(
V57 == 1  ~ "married",
V57 == 2  ~ "not-married")
library(dplyr)
d <-
d %>%
mutate(new_V57 = case_when(
V57 == 1  ~ "married",
V57 == 2  ~ "not-married"))
d <- data.frame(variable = c("strongly disagree", "disagree", "agree", "strongly agree"))
View(d)
mapping <- c("strongly disagree" = 0, "disagree" = 1, "agree" = 2, "strongly agree" = 3)
d$variable.r <- mapping[d$variable]
library(foreign)
write.table(read.dta(file.choose()), file="gss_2010.csv", quote = FALSE, sep = ",")
write.table(read.dta(file.choose()), file="gss_2010.csv", quote = FALSE, sep = ",")
write.table(read.dta(file.choose()), file="gss_2010.csv", quote = FALSE, sep = ",")
library(foreign)
write.table(read.dta(file.choose()), file="gss_2010.csv", quote = FALSE, sep = ",")
library(foreign)
write.table(read.dta(file.choose()), file="gss_2010.csv", quote = FALSE, sep = ",")
library("rio")
install.packages("rio")
library("rio")
install_formats()
library("rio")
x <- import(file.choose())
library(foreign)
write.table(read.dta(file.choose()), file="gss_2010.csv", quote = FALSE, sep = ",")
getwd()
v <-1:3
myvect <- c(-2,-1,0)
as.logical(myvect)
x<- as.Date("2018-10-01")
as.month(x)
x<- as.Date("2018-10-01")
month(x)
x<- as.Date("2018-10-01")
months(x)
x <- 5:8
names(x) <- letters[5:8]
x
(0.9*0.01)/((0.9*0.01)+(0.1*0.99))
(0.85*0.01)/((0.85*0.01)+(0.1*0.99))
day1 <- readRDS("~/Desktop/day1.rds")
View(day1)
install.packages("usethis")
getwd()
setwd("/Users/pruthvi/Documents/Github/stat-nuggets")
setwd("/Users/pruthvi/Documents/Github/stat-nuggets")
usethis::create_from_github("bgoodri/GR5065_2022", destdir = getwd(), fork = FALSE, open = TRUE, protocol = "https")
install.packages('gert')
install.packages('libgit2')
usethis::create_from_github("bgoodri/GR5065_2022", destdir = getwd(), fork = FALSE, open = TRUE, protocol = "https")
install.packages("devtools", dependencies = TRUE)
usethis::create_from_github("bgoodri/GR5065_2022", destdir = getwd(), fork = FALSE, open = TRUE, protocol = "https")
install.packages("gert", dependencies = TRUE)
usethis::create_from_github("bgoodri/GR5065_2022", destdir = getwd(), fork = FALSE, open = TRUE, protocol = "https")
install.packages("gert", dependencies = TRUE)
usethis::create_from_github("bgoodri/GR5065_2022", destdir = getwd(), fork = FALSE, open = TRUE, protocol = "https")
setwd("/Users/pruthvi/Documents/Github/stat-nuggets")
usethis::create_from_github("bgoodri/GR5065_2022", destdir = getwd(), fork = FALSE, open = TRUE, protocol = "https")
getwd()
setwd("/Users/pruthvi/Documents/Github/stat-nuggets")
usethis::create_from_github("bgoodri/GR5065_2022", destdir = getwd(), fork = FALSE, open = TRUE, protocol = "https")
setwd("~/Documents/GitHub/stat-nuggets/bayesian-stats")
usethis::create_from_github("bgoodri/GR5065_2022", destdir = getwd(), fork = FALSE, open = TRUE, protocol = "https")
setwd("~/Documents/GitHub/stat-nuggets/bayesian-stats")
usethis::create_from_github("bgoodri/GR5065_2022", destdir = getwd(), fork = FALSE, open = TRUE, protocol = "https")
